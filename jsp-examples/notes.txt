Based mainly on https://www.tutorialspoint.com/jsp/index.htm

Versions:
	1.1 - 1999
	1.2 - 2001
	2.0 - 2003
	2.1 - 2006
	2.2 - 2009
	2.3 - 2013

! needs a JSP engine, i.e, a container to process JSP pages
	- Apache which has built-in JSP container to support JSP pages development

Steps:
	1. Normal HTTP request
	2. The web server recognizes that the HTTP request is for a JSP page (request ends with .jsp instead of .html)
	3. The JSP engine loads the JSP page from disk and converts it into a servlet content
	4. The JSP engine compiles the servlet into an executable class and forwards the original request to a servlet engine
	5. Servlet engine loads the Servlet class and executes it, the output (HTML format) passed on to the web server inside an HTTP response
	6. Web server forwards the HTTP response to your browser
	7. Web browser handles the dynamically-generated HTML page inside the

Highlight from steps:
	- Translation phase: Done by the JSP engine. Contains 3 steps: reading the JSP file, generating the java and compiling it into a class (these steps are not executed for all requests)
	- Request processing phase: Done by the servlet engine. Executing the class file and generating the output HTML
	- JSP engine (JSP container): Provides environment for the JSP to execute (Translation phase)
	- Servlet engine (Servlet container): Provides environment for a Servlet to execute (Request processing phase)

Notes for steps:
	- The JSP engine checks to see whether a servlet for a JSP file already exists and whether the modification date on the JSP is older than the servlet (not always generate java class)
	- Except for the translation phase, a JSP page is handled exactly like a regular servlet
	? JSP container must support Servlet, these 2 are interchangable terms in JSP

JSP lifecycle:
	- Compilation: parse JSP, create java servlet, compile java servlet
	- Initialization: performed only once, invokes jspInit() method
	- Execution: represents all interactions with requests until the JSP is destroyed, invokes _jspService(HttpServletRequest, HttpServletResponse) method
	- Cleanup: JSP is being removed from use by a container, invokes jspDestroy() method

Servlet Lifecycle (for comparison):
	- Initialization
	- Request lifecycle / Main logic
	- Shutdown

Elements of JSP:
	- Scriptlet: A scriptlet can contain any number of JAVA language statements, variable or method declarations, or expressions that are valid in the page scripting language.
		- syntax: <% ... %> or <jsp:scriptlet>...</jsp:scriptlet>
	- Declaration: A declaration declares one or more variables or methods that you can use in Java code later in the JSP file.
		- syntax: <%! ... %> or <jsp:declaration>...</jsp:declaration>
	- Expression: A JSP expression element contains a scripting language expression that is evaluated, converted to a String, and inserted where the expression appears in the JSP file.
		- syntax: <%= ... %> or <jsp:expression>...</jsp:expression>
	- Comments: JSP comment marks text or statements that the JSP container should ignore. A JSP comment is useful when you want to hide or "comment out", a part of your JSP page.
		- syntax: <%-- ... --%>
	- Directives: A JSP directive affects the overall structure of the servlet class.
		- syntax: <%@ ... %>
		- types:
			- <%@ page ... %> : Defines page-dependent attributes, such as scripting language, error page, and buffering requirements.
			- <%@ include ... %> : Includes a file during the translation phase.
			- <%@ taglib ... %> : Declares a tag library, containing custom actions, used in the page
	- Actions: JSP actions use constructs in XML syntax to control the behavior of the servlet engine. You can dynamically insert a file, reuse JavaBeans components, forward the user to another page, or generate HTML for the Java plugin.
		- syntax: <jsp:action_name attribute="value" />
		- types:
			- jsp:include : Includes a file at the time the page is requested.
			- jsp:useBean : Finds or instantiates a JavaBean.
			- jsp:setProperty : Sets the property of a JavaBean.
			- jsp:getProperty : Inserts the property of a JavaBean into the output.
			- jsp:forward : Forwards the requester to a new page.
			- jsp:plugin : Generates browser-specific code that makes an OBJECT or EMBED tag for the Java plugin.
			- jsp:element : Defines XML elements dynamically.
			- jsp:attribute : Defines dynamically-defined XML element's attribute.
			- jsp:body : Defines dynamically-defined XML element's body.
			- jsp:text : Used to write template text in JSP pages and documents.
	- Implicit Objects: JSP supports nine automatically defined variables, which are also called implicit objects.
		- types:
			- request : This is the HttpServletRequest object associated with the request.
			- response : This is the HttpServletResponse object associated with the response to the client.
			- out : This is the PrintWriter object used to send output to the client.
			- session : This is the HttpSession object associated with the request.
			- application : This is the ServletContext object associated with the application context.
			- config : This is the ServletConfig object associated with the page.
			- pageContext : This encapsulates use of server-specific features like higher performance JspWriters.
			- page : This is simply a synonym for this, and is used to call the methods defined by the translated servlet class.
			- Exception : The Exception object allows the exception data to be accessed by designated JSP.
	- Control-Flow Statements:
		- Decision-Making Statements (if, switch)
		- Loop Statements (for, while, and do…while)
	- Literals:
		- Boolean − true and false
		- Integer − as in Java
		- Floating point − as in Java
		- String − with single and double quotes; " is escaped as \", ' is escaped as \', and \ is escaped as \\.
		- Null − null