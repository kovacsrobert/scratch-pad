
buildscript {
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/plugins-release/" }
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE')
        classpath('com.palantir.gradle.docker:gradle-docker:0.20.1')
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    group = 'demo.cluster'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/libs-release/" }
    }
}

subprojects {
    dependencies {
        // spring
        compile('org.springframework.boot:spring-boot-starter-web:2.1.3.RELEASE') {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }
        compile('org.springframework.boot:spring-boot-starter-log4j2:2.1.3.RELEASE')
        compile('org.springframework:spring-context:5.0.9.RELEASE')
        compile('org.springframework:spring-context-support:5.0.9.RELEASE')

        // caching
        compile group: 'org.ehcache', name: 'ehcache', version: '3.7.1'
        compile group: 'org.ehcache', name: 'ehcache-clustered', version: '3.7.1'
//        compile('net.sf.ehcache:ehcache-jgroupsreplication:1.7')
//        compile('org.terracotta:terracotta-toolkit-runtime:4.3.1')

        // utility & logging
        compile('com.google.guava:guava:21.0')
        compile('org.apache.logging.log4j:log4j-api:2.11.2')
        compile('org.apache.logging.log4j:log4j-core:2.11.2')

        testCompile('org.springframework.boot:spring-boot-starter-test:2.1.3.RELEASE')
        testCompile('junit:junit:4.12')
    }
}

configure(subprojects.findAll {it.name == "cluster-dao" || it.name == "cluster-web"}) {

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.palantir.docker'

    task unpack(type: Copy) {
        dependsOn bootJar
        from(zipTree(tasks.bootJar.outputs.files.singleFile))
        into("build/dependency")
    }

    docker {
        dependsOn clean
        dependsOn build
        name "${project.name}"
        copySpec.from(tasks.unpack.outputs).into("dependency")
        buildArgs(['DEPENDENCY': "dependency"])
    }

    dependencies {
        implementation project(':cluster-util')
    }
}
